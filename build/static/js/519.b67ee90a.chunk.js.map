{"version":3,"file":"static/js/519.b67ee90a.chunk.js","mappings":"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","sources":["components/tabs/tabs.e.js","components/tabs/tabs.js","pages/articles/article/article.js"],"sourcesContent":["import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div``\r\n\r\nexport const Icon = styled.div`\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease;\r\n  display: inline-block;\r\n\r\n  & > span {\r\n    font-size: 20px;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n    transform: scale(1.05);\r\n  }\r\n`\r\nexport const RelativeParent = styled.span`\r\n   position: relative;\r\n`","import { Tabs as AntTabs } from \"antd\"\r\n\r\nimport { Wrapper, Icon, RelativeParent } from \"./tabs.e\"\r\n\r\nconst Tabs = ({ tabs, index, tabRightContent, setIndex }) => {\r\n  const OperationsSlot = {\r\n    right: tabRightContent?.map((rightTab, index) => (\r\n      <RelativeParent key={index}>\r\n        <Icon key={index} onClick={() => rightTab?.onClick?.()}>\r\n          {rightTab.icon}\r\n        </Icon>\r\n      </RelativeParent>\r\n    )),\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <AntTabs\r\n        animated\r\n        activeKey={index.toString()}\r\n        onChange={(key) => setIndex(parseInt(key))}\r\n        tabBarExtraContent={OperationsSlot}\r\n      >\r\n        {tabs.map((tab, index) => (\r\n          <AntTabs.TabPane tab={tab.title} key={index}>\r\n            {tab.content}\r\n          </AntTabs.TabPane>\r\n        ))}\r\n      </AntTabs>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Tabs\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useArticle, useDeleteArticle, useUpdateArticle} from \"hooks\";\r\nimport {Button, Col, Form, Input, Modal, Row, Spin} from 'antd';\r\nimport {Editor} from \"react-draft-wysiwyg\";\r\nimport {ContentState, convertToRaw, EditorState} from \"draft-js\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport htmlToDraft from \"html-to-draftjs\";\r\nimport ImageUpload from \"../../../components/image-upload/image-upload\";\r\nimport {MainApi} from \"../../../api\";\r\nimport {toast} from \"react-toastify\";\r\nimport {DeleteOutlined, ExclamationCircleOutlined} from \"@ant-design/icons\";\r\nimport Tabs from \"../../../components/tabs/tabs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\nfunction Article(props) {\r\n    const [info, setInfo] = useState()\r\n    const {data, isLoading} = useArticle()\r\n    const [url, setUrl] = useState(\"\")\r\n    const [index, setIndex] = useState(0)\r\n    const [form] = Form.useForm()\r\n    const navigate = useNavigate()\r\n\r\n    const updateMutation = useUpdateArticle({\r\n        onSuccess() {\r\n            toast.success(\"Successfully updated\")\r\n        },\r\n        onError(err) {\r\n            console.log(err)\r\n        },\r\n    })\r\n\r\n    const deleteMutation = useDeleteArticle({\r\n        onSuccess: () => {\r\n            toast.success(\"Successfully deleted\")\r\n            navigate(\"/articles\")\r\n        },\r\n        onError: (error) => {\r\n            toast.error(error?.data?.error)\r\n        },\r\n    })\r\n\r\n    const onFinish = (values) => {\r\n        updateMutation.mutate({\r\n            body: draftToHtml(convertToRaw(editorState.getCurrentContent())).toString(),\r\n            title: values?.title,\r\n            readTime: Number(values?.readTime),\r\n            name:values?.name,\r\n            image: url\r\n        })\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const blocks = htmlToDraft(info?.body ?? \"\");\r\n\r\n    const {contentBlocks, entityMap} = blocks;\r\n    const contentState = ContentState.createFromBlockArray(\r\n        contentBlocks,\r\n        entityMap\r\n    );\r\n    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(contentState));\r\n    const onEditorStateChange = (editorState) => {\r\n        setEditorState(editorState)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        Modal.confirm({\r\n            centered: true,\r\n            title: \"Are you sure to delete?\",\r\n            icon: <ExclamationCircleOutlined/>,\r\n            onOk() {\r\n                deleteMutation.mutate()\r\n            },\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue(data?.data?.data)\r\n        setInfo(data?.data?.data)\r\n        setUrl(data?.data?.data?.image)\r\n        const blocks = htmlToDraft(data?.data?.data?.body ?? \"\");\r\n        const {contentBlocks, entityMap} = blocks;\r\n        const contentState = ContentState.createFromBlockArray(\r\n            contentBlocks,\r\n            entityMap\r\n        );\r\n        setEditorState(EditorState.createWithContent(contentState))\r\n    }, [data, form])\r\n\r\n    return (\r\n        <Tabs\r\n            index={index}\r\n            setIndex={setIndex}\r\n            tabs={[\r\n                {\r\n                    title: \"Article\",\r\n                    content: (\r\n                        <Spin spinning={isLoading}>\r\n                            <div>\r\n                                <Form\r\n                                    name=\"basic\"\r\n                                    initialValues={{\r\n                                        remember: true,\r\n                                    }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                    autoComplete=\"off\"\r\n                                    layout=\"vertical\"\r\n                                    form={form}\r\n                                >\r\n                                    <Row gutter={[20, 20]} className=\"alce\">\r\n                                        <Col span={4}>\r\n                                            <ImageUpload\r\n                                                onSetImage={image => setUrl(image)}\r\n                                                url={`${MainApi}/${url}`}\r\n                                                forEdit={true}\r\n                                                imgLoading={!url}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span={9}>\r\n                                            <Form.Item\r\n                                                label=\"Title\"\r\n                                                name=\"title\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Please input your title!',\r\n                                                    },\r\n                                                ]}\r\n                                            >\r\n                                                <Input/>\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        <Col span={9}>\r\n                                            <div>\r\n                                                <Form.Item\r\n                                                    label=\"Read Time\"\r\n                                                    name=\"readTime\"\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            message: 'Please input your Read Time!',\r\n                                                        },\r\n                                                    ]}\r\n                                                >\r\n                                                    <Input type=\"number\"/>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        </Col>\r\n                                        <Col span={9}>\r\n                                            <Form.Item\r\n                                                label=\"Name\"\r\n                                                name=\"name\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Please input your Name!',\r\n                                                    },\r\n                                                ]}\r\n                                            >\r\n                                                <Input/>\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Form.Item\r\n                                            label=\"Body\"\r\n                                            name=\"body\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: 'Please input your body!',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Editor\r\n                                                editorState={editorState}\r\n                                                toolbarClassName=\"toolbarClassName\"\r\n                                                wrapperClassName=\"wrapperClassName\"\r\n                                                editorClassName=\"editorClassName\"\r\n                                                onEditorStateChange={onEditorStateChange}\r\n                                                toolbar={{\r\n                                                    options: [\r\n                                                        \"inline\",\r\n                                                        \"blockType\",\r\n                                                        \"fontSize\",\r\n                                                        \"fontFamily\",\r\n                                                        \"list\",\r\n                                                        \"textAlign\",\r\n                                                        \"colorPicker\",\r\n                                                        \"link\",\r\n                                                        \"embedded\",\r\n                                                        \"emoji\",\r\n                                                        \"image\",\r\n                                                        \"remove\",\r\n                                                        \"history\",\r\n                                                    ],\r\n                                                    colorPicker: {\r\n                                                        popupClassName: \"colorModal\",\r\n                                                    },\r\n                                                    link: {\r\n                                                        popupClassName: \"colorModal\",\r\n                                                    },\r\n                                                    image: {\r\n                                                        popupClassName: \"colorModal\",\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </Row>\r\n\r\n                                    <Form.Item>\r\n                                        <Button\r\n                                            type=\"primary\"\r\n                                            htmlType=\"submit\"\r\n                                            loading={updateMutation?.isLoading}\r\n                                        >\r\n                                            Submit\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        </Spin>\r\n                    ),\r\n                },\r\n            ]}\r\n            tabRightContent={[\r\n                {\r\n                    icon: <DeleteOutlined/>,\r\n                    onClick: () => handleDelete(),\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nexport default React.memo(Article);\r\n"],"names":["Wrapper","styled","Icon","RelativeParent","tabs","index","tabRightContent","setIndex","OperationsSlot","right","map","rightTab","onClick","icon","animated","activeKey","toString","onChange","key","parseInt","tabBarExtraContent","tab","title","content","Article","props","useState","info","setInfo","useArticle","data","isLoading","url","setUrl","Form","form","navigate","useNavigate","updateMutation","useUpdateArticle","onSuccess","toast","onError","err","console","log","deleteMutation","useDeleteArticle","error","blocks","htmlToDraft","body","contentBlocks","entityMap","contentState","ContentState","EditorState","editorState","setEditorState","useEffect","setFieldsValue","image","spinning","name","initialValues","remember","onFinish","values","mutate","draftToHtml","convertToRaw","getCurrentContent","readTime","Number","onFinishFailed","errorInfo","autoComplete","layout","gutter","className","span","onSetImage","MainApi","forEdit","imgLoading","label","rules","required","message","type","Editor","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","toolbar","options","colorPicker","popupClassName","link","htmlType","loading","Modal","centered","onOk","React"],"sourceRoot":""}