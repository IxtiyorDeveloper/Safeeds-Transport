{"version":3,"file":"static/js/31.c6571b21.chunk.js","mappings":"qMAiEA,IA7DA,YAS0B,IARAA,EAQD,EARCA,aACAC,EAOD,EAPCA,WAOD,IANCC,gBAAAA,OAMD,MANmB,IAMnB,EALCC,EAKD,EALCA,YACAC,EAID,EAJCA,KACAC,EAGD,EAHCA,KACAC,EAED,EAFCA,KACAC,EACD,EADCA,aAGtB,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,QAAO,GACxB,GAA0BN,EAAAA,EAAAA,eAASO,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,GAAkBC,EAAAA,EAAAA,UAAQ,WAa5B,OAAOC,KAZa,WAAiB,IAAhBJ,EAAe,uDAAP,GACzBH,EAASQ,SAAW,EACpB,IAAMC,EAAUT,EAASQ,QACzBT,EAAW,IACXF,GAAY,GACZV,EAAagB,GAAOO,MAAK,SAAAC,GACjBF,IAAYT,EAASQ,UACzBT,EAAWY,GACD,OAAVvB,QAAU,IAAVA,GAAAA,EAAaU,EAAQ,IACrBD,GAAY,GACf,GACJ,GAC4BR,EAChC,GAAE,CAACA,EAAiBF,EAAcC,EAAYU,IAY/C,OACI,SAAC,IAAD,CACIc,YAAU,EACVC,UAAU,KACVC,MAAO,CAACC,MAAO,OAAQC,OAAQ,QAC/B1B,YAAaA,EACb2B,YAAY,EACZC,cAAc,EACdC,SAAUd,EACVe,QAAS,kBAAOtB,EAAQuB,QAAUhB,EAAgB,GAAzC,EACTiB,gBAAiB1B,GAAW,SAAC,IAAD,CAAM2B,KAAK,WAAY,SAAC,IAAD,IACnDzB,QAASA,EACT0B,SAtBS,SAACC,GACdrB,EAASqB,GACI,WAAThC,GACAD,EAAKiC,GAEI,aAAThC,GACAF,EAAKkC,EAEZ,EAeOtB,MAAOA,EACPT,aAAcA,GAGzB,C,mOC0PD,MAnTA,SAAqBgC,GACjB,OAA0B/B,EAAAA,EAAAA,UAAS,IAAnC,eAAOgC,EAAP,KAAcC,EAAd,KACA,GAAkBjC,EAAAA,EAAAA,UAAS,IAA3B,eAAOkC,EAAP,KAAUrC,EAAV,KACA,GAAkBG,EAAAA,EAAAA,UAAS,IAA3B,eAAOmC,EAAP,KAAUvC,EAAV,KACA,GAAkBI,EAAAA,EAAAA,UAAS,CAAC,IAA5B,eAAOoC,EAAP,KAAUC,EAAV,KASOC,EAAUC,EAAAA,EAAAA,OAEjB,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eAgCA,OAtBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,IAAIC,KACjB,IAAKZ,EAAMN,OAAQ,CAEf,IADA,IAAImB,EAAI,GACCC,EAAC,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAMI,cAAeD,GAAK,KAAMA,IACzCD,EAAC,kBAAOA,GAAP,CAAUC,IAEfb,EAASY,EACZ,CAEJ,GAAE,CAACb,KAEJU,EAAAA,EAAAA,YAAU,WACAR,GACFO,EAAKO,cAAc,SAAUd,GAE3BC,GACFM,EAAKO,cAAc,WAAYb,EAEtC,GAAE,CAACD,EAAGC,EAAGM,KAIN,iBAAKvB,UAAU,cAAf,WACI,gBAAKA,UAAU,WAAf,UACI,gBAAKA,UAAU,eAAf,4BAKJ,gBAAKA,UAAU,KAAf,UACI,iBAAKA,UAAU,MAAf,WACA,gBAAKA,UAAU,MAAf,0BAGA,gBAAKA,UAAU,OAAf,UACI,UAAC,IAAD,CACI+B,KAAK,QACLC,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEVE,cAAe,CACXC,UAAU,GAEdC,SAlEH,SAACC,GACdC,QAAQC,IAAI,WAAYF,EAC3B,EAiEmBG,eAhEG,SAACC,GACpBH,QAAQC,IAAI,UAAWE,EAC1B,EA+DmBC,aAAa,MACbC,OAAO,WACPrB,KAAMA,EAfV,WAiBI,UAAC,IAAD,CAAKsB,OAAQ,CAAC,GAAI,IAAlB,WACI,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,kBACNlB,KAAK,SACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,uCANrB,UAUI,SAAC,IAAD,CACI9E,aAAc,SAAA+E,GAAM,OAAIC,EAAAA,EAAAA,GAAkBD,EAAQ,UAA9B,EACpB5E,YAAY,yBACZE,KAAMA,EACNC,KAAK,SACLC,aAAc,oBAI1B,SAAC,IAAD,CAAKiE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,oBACNlB,KAAK,WACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,yCANrB,UAUI,SAAC,IAAD,CACI9E,aAAc,SAAA+E,GAAM,OAAIC,EAAAA,EAAAA,GAAkBD,EAAQ,UAA9B,EACpB5E,YAAY,yBACZC,KAAMA,EACNE,KAAK,WACLC,aAAc,uBAK9B,gCAEQqC,EAAEqC,KAAI,SAACC,EAAGC,GACN,OACI,4BACI,2BACKD,EAAI,EADT,aAGA,UAAC,IAAD,CAAKX,OAAQ,CAAC,GAAI,IAAlB,WACI,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,OACNlB,KAAI,cAASyB,GACbN,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,4BANrB,UAUI,SAAC,IAAD,CAAQ3E,YAAY,OAApB,gBAEQqC,QAFR,IAEQA,OAFR,EAEQA,EAAOyC,KAAI,SAAC3B,EAAG8B,GACX,OACI,SAACtC,EAAD,CAAgB9B,MAAOsC,EAAvB,SAA2BA,GAAd8B,EAEpB,WAMjB,SAAC,IAAD,CAAKZ,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,OACNlB,KAAI,cAASyB,GACbN,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,4BANrB,UAUI,SAAC,IAAD,CAAO3E,YAAY,cAG3B,SAAC,IAAD,CAAKqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,QACNlB,KAAI,eAAUyB,GACdN,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,6BANrB,UAUI,SAAC,IAAD,CAAO3E,YAAY,cAIvB+E,EAAI,IACJ,SAAC,IAAD,CAAKV,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAI/C,MAAO,CAAC0D,UAAW,UAAhD,UACI,SAAC,IAAD,CAAQ/E,KAAK,UAAUgF,QAAS,kBAAMzC,EAAKD,EAAE2C,QAAO,SAAA7C,GAAC,OAAIA,IAAMwC,CAAV,IAArB,EAAhC,wBAvDgBC,KA+DvC,KAEL,SAAC,IAAD,CAAQG,QAAS,kBAhLvB,WAEd,IADA,IAAIjC,EAAI,GACCC,EAAI,EAAGA,GAAKV,EAAEA,EAAEV,OAAS,GAAK,EAAGoB,IACtCD,EAAC,kBAAOA,GAAP,CAAUC,IAEfT,EAAKQ,EACR,CA0K8CmC,EAAN,EAAmBlF,KAAK,UAAzC,yBAEJ,UAAC,IAAD,CAAKiE,OAAQ,CAAC,GAAI,IAAK5C,MAAO,CAAC0D,UAAW,QAA1C,WACI,SAAC,IAAD,CAAKb,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,OACNlB,KAAK,OACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,4BANrB,UAUI,UAAC,WAAD,YACI,SAAC,KAAD,CAAO9D,MAAM,OAAb,mBACA,SAAC,KAAD,CAAOA,MAAM,WAAb,8BAIZ,SAAC,IAAD,CAAKwD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,gBACNlB,KAAK,MACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,qCANrB,UAUI,UAAC,WAAD,YACI,SAAC,KAAD,CAAO9D,MAAM,OAAb,6BACA,SAAC,KAAD,CAAOA,MAAM,WAAb,mCAKhB,UAAC,IAAD,CAAKuD,OAAQ,CAAC,GAAI,IAAlB,WACI,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,YACNlB,KAAK,YACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,iCANrB,UAUI,SAAC,IAAD,SAGR,SAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,OACNlB,KAAK,OACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,4BANrB,UAUI,SAAC,IAAD,SAGR,SAAC,IAAD,CAAKN,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,QACNlB,KAAK,QACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,6BANrB,UAUI,SAAC,IAAD,CAAOxE,KAAK,eAGpB,SAAC,IAAD,CAAKkE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACI,SAAC,SAAD,CACIC,MAAM,QACNlB,KAAK,QACLmB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,4BANrB,UAUE,SAAC,IAAD,YAIV,SAAC,SAAD,CACIlB,WAAY,CACR6B,OAAQ,EACR9B,KAAM,IAHd,UAMI,SAAC,IAAD,CAAQrD,KAAK,UAAUoF,SAAS,SAAhC,kCAU3B,EC3SD,MARA,SAAenD,GACX,OACI,gBAAKb,UAAU,WAAf,UACI,SAAC,EAAD,KAGX,C,6FCRYiE,E,MAAMC,GAAAA,OAAa,CAC5BC,QAAS,gCCMAb,EAAiB,yCAAG,WAC7Bc,EACAC,GAF6B,2GAMPJ,EAAIK,KAAJ,WAAaD,EAAb,mBAA8BD,IANvB,cAMnBG,EANmB,gCAQlBA,QARkB,IAQlBA,GARkB,UAQlBA,EAAKC,YARa,iBAQlB,EAAWC,kBARO,iBAQlB,EAAwB,UARN,aAQlB,EAA4BxF,QAAQsE,KAAI,SAACmB,GAAD,MAAW,CACtDpF,MAAK,OAAEoF,QAAF,IAAEA,OAAF,EAAEA,EAAMC,KACb1B,MAAK,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAMC,KAF8B,KARtB,sCAcnB,IAAIC,MAAJ,MAdmB,yDAAH,uD","sources":["components/elements/select/select.js","components/quote-sections/quote-banner/quote-banner.js","pages/quote/quote.js","service/api.js","utils/functions/fetchOptions.js"],"sourcesContent":["import React, {useMemo, useRef, useState} from 'react';\r\nimport {Empty, Select, Spin} from \"antd\"\r\nimport debounce from \"lodash/debounce\"\r\n\r\nfunction SelectOption({\r\n                          fetchOptions,\r\n                          afterFetch,\r\n                          debounceTimeout = 400,\r\n                          placeholder,\r\n                          setD,\r\n                          setP,\r\n                          type,\r\n                          defaultValue\r\n                      }) {\r\n\r\n    const [fetching, setFetching] = useState(false)\r\n    const [options, setOptions] = useState([])\r\n    const fetchRef = useRef(0)\r\n    const [value, setValue] = useState(undefined)\r\n\r\n    const debounceFetcher = useMemo(() => {\r\n        const loadOptions = (value = \"\") => {\r\n            fetchRef.current += 1\r\n            const fetchId = fetchRef.current\r\n            setOptions([])\r\n            setFetching(true)\r\n            fetchOptions(value).then(newOptions => {\r\n                if (fetchId !== fetchRef.current) return\r\n                setOptions(newOptions)\r\n                afterFetch?.(options[0])\r\n                setFetching(false)\r\n            })\r\n        }\r\n        return debounce(loadOptions, debounceTimeout)\r\n    }, [debounceTimeout, fetchOptions, afterFetch, options])\r\n\r\n    const onChange = (e) => {\r\n        setValue(e);\r\n        if (type === \"pickup\") {\r\n            setP(e)\r\n        }\r\n        if (type === \"delivery\"){\r\n            setD(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Select\r\n            showSearch\r\n            className=\"sl\"\r\n            style={{width: \"100%\", height: \"40px\"}}\r\n            placeholder={placeholder}\r\n            allowClear={true}\r\n            filterOption={false}\r\n            onSearch={debounceFetcher}\r\n            onFocus={() => !options.length && debounceFetcher(\"\")}\r\n            notFoundContent={fetching ? <Spin size=\"small\"/> : <Empty/>}\r\n            options={options}\r\n            onChange={onChange}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SelectOption;\r\n","import React, {useEffect, useState} from 'react';\r\nimport \"./quote-banner.scss\"\r\nimport {Button, Col, DatePicker, Form, Input, Radio, Row, Select} from \"antd\"\r\nimport SelectOption from \"../../elements/select/select\";\r\nimport {fetchSearchFields} from \"../../../utils/functions/fetchOptions\";\r\n\r\nfunction QuoteBanner(props) {\r\n    const [years, setYears] = useState([])\r\n    const [p, setP] = useState(\"\")\r\n    const [d, setD] = useState(\"\")\r\n    const [f, setF] = useState([0])\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const {Option} = Select;\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const handleAdd = () => {\r\n        let a = []\r\n        for (let i = 0; i <= f[f.length - 1] + 1; i++) {\r\n            a = [...a, i]\r\n        }\r\n        setF(a)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const date = new Date()\r\n        if (!years.length) {\r\n            let a = []\r\n            for (let i = date?.getFullYear(); i >= 1900; i--) {\r\n                a = [...a, i]\r\n            }\r\n            setYears(a)\r\n        }\r\n\r\n    }, [years])\r\n\r\n    useEffect(() => {\r\n        if (!!p) {\r\n            form.setFieldValue(\"pickup\", p)\r\n        }\r\n        if (!!d) {\r\n            form.setFieldValue(\"delivery\", d)\r\n        }\r\n    }, [p, d, form])\r\n\r\n\r\n    return (\r\n        <div className=\"wr-quote-sp\">\r\n            <div className=\"quote-wr\">\r\n                <div className=\"quote-banner\">\r\n                    Get a quote\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"pd\">\r\n                <div className=\"frq\">\r\n                <div className=\"tit\">\r\n                    Get a quote\r\n                </div>\r\n                <div className=\"sdrt\">\r\n                    <Form\r\n                        name=\"basic\"\r\n                        labelCol={{\r\n                            span: 24,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 24,\r\n                        }}\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={onFinish}\r\n                        onFinishFailed={onFinishFailed}\r\n                        autoComplete=\"off\"\r\n                        layout=\"vertical\"\r\n                        form={form}\r\n                    >\r\n                        <Row gutter={[20, 20]}>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Pickup location\"\r\n                                    name=\"pickup\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your Pickup location!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <SelectOption\r\n                                        fetchOptions={search => fetchSearchFields(search, \"zipcode\")}\r\n                                        placeholder=\"ENTER ZIP CODE OR CITY\"\r\n                                        setP={setP}\r\n                                        type=\"pickup\"\r\n                                        defaultValue={\"wasgington\"}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Delivery location\"\r\n                                    name=\"delivery\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your Delivery location!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <SelectOption\r\n                                        fetchOptions={search => fetchSearchFields(search, \"zipcode\")}\r\n                                        placeholder=\"ENTER ZIP CODE OR CITY\"\r\n                                        setD={setD}\r\n                                        type=\"delivery\"\r\n                                        defaultValue={\"wasgington\"}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <>\r\n                            {\r\n                                f.map((y, index) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <div>\r\n                                                {y + 1} - car\r\n                                            </div>\r\n                                            <Row gutter={[20, 20]} key={index}>\r\n                                                <Col lg={12} md={24} sm={24}>\r\n                                                    <Form.Item\r\n                                                        label=\"Year\"\r\n                                                        name={`year${y}`}\r\n                                                        rules={[\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Please input your year!',\r\n                                                            },\r\n                                                        ]}\r\n                                                    >\r\n                                                        <Select placeholder=\"Year\">\r\n                                                            {\r\n                                                                years?.map((i, k) => {\r\n                                                                    return (\r\n                                                                        <Option key={k} value={i}>{i}</Option>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n\r\n                                                        </Select>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col lg={12} md={24} sm={24}>\r\n                                                    <Form.Item\r\n                                                        label=\"Make\"\r\n                                                        name={`make${y}`}\r\n                                                        rules={[\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Please input your make!',\r\n                                                            },\r\n                                                        ]}\r\n                                                    >\r\n                                                        <Input placeholder=\"Make\"/>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col lg={12} md={24} sm={24}>\r\n                                                    <Form.Item\r\n                                                        label=\"Model\"\r\n                                                        name={`model${y}`}\r\n                                                        rules={[\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Please input your model!',\r\n                                                            },\r\n                                                        ]}\r\n                                                    >\r\n                                                        <Input placeholder=\"Model\"/>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                {\r\n                                                    y > 0 &&\r\n                                                    <Col lg={12} md={24} sm={24} style={{marginTop: \"35.8px\"}}>\r\n                                                        <Button type=\"primary\" onClick={() => setF(f.filter(p => p !== y))}>\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    </Col>\r\n                                                }\r\n                                            </Row>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <Button onClick={() => handleAdd()} type=\"primary\">Add Car</Button>\r\n                        </>\r\n                        <Row gutter={[20, 20]} style={{marginTop: \"20px\"}}>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Type\"\r\n                                    name=\"type\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your type!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Radio.Group>\r\n                                        <Radio value=\"Open\">Open</Radio>\r\n                                        <Radio value=\"Enclosed\">Enclosed</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Run and drive\"\r\n                                    name=\"run\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your run and drive!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Radio.Group>\r\n                                        <Radio value=\"Open\">Vehicle drives</Radio>\r\n                                        <Radio value=\"Enclosed\">Inoperable</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[20, 20]}>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Ship date\"\r\n                                    name=\"ship_date\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your Ship date!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <DatePicker/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your name!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your email!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input type=\"email\"/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col lg={12} md={24} sm={24}>\r\n                                <Form.Item\r\n                                    label=\"Phone\"\r\n                                    name=\"phone\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your name!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                  <Input/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Form.Item\r\n                            wrapperCol={{\r\n                                offset: 0,\r\n                                span: 24,\r\n                            }}\r\n                        >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuoteBanner;\r\n","import React from 'react';\r\nimport QuoteBanner from \"../../components/quote-sections/quote-banner/quote-banner\";\r\nimport \"./quote.scss\"\r\n\r\nfunction Quote(props) {\r\n    return (\r\n        <div className=\"quote-pg\">\r\n            <QuoteBanner/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quote;","import axios from \"axios\"\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"http://147.182.130.242:3001\",\r\n})\r\n","import {api} from \"../../service/api\"\r\n\r\n/**\r\n * fetchFields fn\r\n *\r\n * @param searchString: Input value.\r\n * @param urlKey: backend url key.\r\n */\r\n\r\nexport const fetchSearchFields = async (\r\n    searchString,\r\n    urlKey\r\n) => {\r\n    try {\r\n\r\n        const res = await api.post(`/${urlKey}?search=${searchString}`)\r\n\r\n        return res?.data?.city_state?.[0]?.options.map((item) => ({\r\n            value: item?.text,\r\n            label: item?.text\r\n        }))\r\n\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n"],"names":["fetchOptions","afterFetch","debounceTimeout","placeholder","setD","setP","type","defaultValue","useState","fetching","setFetching","options","setOptions","fetchRef","useRef","undefined","value","setValue","debounceFetcher","useMemo","debounce","current","fetchId","then","newOptions","showSearch","className","style","width","height","allowClear","filterOption","onSearch","onFocus","length","notFoundContent","size","onChange","e","props","years","setYears","p","d","f","setF","Option","Select","Form","form","useEffect","date","Date","a","i","getFullYear","setFieldValue","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","layout","gutter","lg","md","sm","label","rules","required","message","search","fetchSearchFields","map","y","index","k","marginTop","onClick","filter","handleAdd","offset","htmlType","api","axios","baseURL","searchString","urlKey","post","res","data","city_state","item","text","Error"],"sourceRoot":""}